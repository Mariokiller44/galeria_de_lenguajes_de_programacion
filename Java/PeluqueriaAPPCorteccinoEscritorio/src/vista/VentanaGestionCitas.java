/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import com.github.lgooddatepicker.components.*;
import java.awt.*;
import java.sql.*;
import java.time.*;
import java.util.*;
import javax.swing.*;
import modelo.*;
import controlador.ConexionBD;
import javax.swing.table.*;

/**
 * Clase para gestionar la ventana de citas.
 *
 * @author Mario
 */
public class VentanaGestionCitas extends JFrame {

    //<editor-fold defaultstate="collapsed" desc="Variables de Instancia">
    private Connection con; // Conexión a la base de datos
    private String[] columnas = {"Fecha", "Hora", "Servicio", "Precio", "Cliente"}; // Lista de columnas para la tabla
    private String[] columnasAdmin = {"Fecha", "Hora", "Servicio", "Precio", "Cliente", "Personal"}; // Lista de columnas para la tabla de administrador
    private VentanaPrincipal vc; // Objeto de la clase VentanaPrincipal
    private JComboBox<String> comboBoxClientes; // Cuadro de lista desplegable para horarios y clientes
    private int filaSeleccionada;
    private Cita citaElegida;
    private Personal empleadoEscogido, empleadoPorDefecto;
    private Horario horarioSeleccionado;
    private ArrayList<Cita> listadoCitasInicial, listadoCitas;
    private ArrayList<Horario> listaHorarioInicial, listadoHorariosCitados;
    //</editor-fold>

    /**
     * Constructor vacio de la clase
     */
    public VentanaGestionCitas() {
        try {
            initComponents(); // Inicialización de componentes gráficos
            setIconImage(getIconImage()); // Establecer la imagen del icono de la aplicación
            setExtendedState(JFrame.MAXIMIZED_BOTH); // Establecer la ventana en pantalla completa
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Establecer la acción de cierre de la ventana
            setTitle("Gestionar citas"); // Dar titulo a la ventana
            setLocationRelativeTo(null); // Centrar la ventana en la pantalla
            inicializarDatosIniciales(); // Inicializamos por defecto con el usuario administrador
            comprobarTabla(); // Comprobar si la tabla está vacía o no
            modificarDiseño();// Modificar el diseño de la ventana
            setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al iniciar la ventana de gestión de Citas: " + e.getMessage(), "Error", JOptionPane.ABORT);
            dispose();
        }
    }

    public VentanaGestionCitas(Personal empleadoEscogido, Connection conexionBD) {
        try {
            initComponents(); // Inicialización de componentes gráficos
            setIconImage(getIconImage()); // Establecer la imagen del icono de la aplicación
            setExtendedState(JFrame.MAXIMIZED_BOTH); // Establecer la ventana en pantalla completa
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Establecer la acción de cierre de la ventana
            setTitle("Gestionar citas");
            setLocationRelativeTo(null); // Centrar la ventana en la pantalla
            inicializarDatos(conexionBD, empleadoEscogido);
            comprobarTabla(); // Comprobar si la tabla está vacía o no
            modificarDiseño(); // Modificar el diseño de la ventana
            setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al iniciar la ventana de gestión de Citas: " + e.getMessage(), "Error", JOptionPane.ABORT);
            dispose();
        }
    }

    /**
     * Método para obtener la imagen del icono de la aplicación.
     */
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage("./src/images/iconoDeAppEscritorio.png"); // Ruta de la imagen del icono
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        panelSuperior = new javax.swing.JPanel();
        espacios = new javax.swing.JLabel();
        btnPedir = new javax.swing.JButton();
        espacios1 = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        espacios2 = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        panelInferior = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1003, 350));

        panelPrincipal.setBackground(new java.awt.Color(102, 102, 255));
        panelPrincipal.setLayout(new java.awt.BorderLayout(0, 9));

        panelSuperior.setOpaque(false);
        panelSuperior.add(espacios);

        btnPedir.setFont(new java.awt.Font("Comic Sans MS", 0, 18));
        btnPedir.setText("Pedir Cita");
        btnPedir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnPedirMousePressed(evt);
            }
        });
        panelSuperior.add(btnPedir);
        panelSuperior.add(espacios1);

        btnModificar.setFont(new java.awt.Font("Comic Sans MS", 0, 18));
        btnModificar.setText("Modificar Cita");
        btnModificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnModificarMousePressed(evt);
            }
        });
        panelSuperior.add(btnModificar);
        panelSuperior.add(espacios2);

        btnBorrar.setFont(new java.awt.Font("Comic Sans MS", 0, 18));
        btnBorrar.setText("Anular Cita");
        btnBorrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnBorrarMousePressed(evt);
            }
        });
        panelSuperior.add(btnBorrar);
        panelSuperior.add(jLabel1);
        panelSuperior.add(jLabel2);

        panelPrincipal.add(panelSuperior, java.awt.BorderLayout.NORTH);

        panelTabla.setOpaque(false);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Hora", "Servicio", "Precio", "Empleado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(1).setResizable(false);
            tabla.getColumnModel().getColumn(2).setResizable(false);
            tabla.getColumnModel().getColumn(3).setResizable(false);
            tabla.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout panelTablaLayout = new javax.swing.GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1009, Short.MAX_VALUE)
        );
        panelTablaLayout.setVerticalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
        );

        panelPrincipal.add(panelTabla, java.awt.BorderLayout.CENTER);

        panelInferior.setOpaque(false);
        panelInferior.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jLabel3.setText("                                                                                                                                              ");
        panelInferior.add(jLabel3);

        btnSalir.setFont(new java.awt.Font("Comic Sans MS", 0, 18));
        btnSalir.setText("VOLVER A MENU PRINCIPAL");
        btnSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnSalirMousePressed(evt);
            }
        });
        panelInferior.add(btnSalir);

        panelPrincipal.add(panelInferior, java.awt.BorderLayout.SOUTH);

        jLabel4.setText("       ");
        panelPrincipal.add(jLabel4, java.awt.BorderLayout.WEST);

        jLabel5.setText("           ");
        panelPrincipal.add(jLabel5, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarMousePressed
        // TODO add your handling code here:
        if (tabla.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila para modificar.");
        } else {
            comprobarYmodificarCita();
        }
    }//GEN-LAST:event_btnModificarMousePressed

    private void btnPedirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPedirMousePressed
        // TODO add your handling code here:
        if (empleadoEscogido.getApellidos().contains("Administrador")) {
            // Método para administrador
            aniadirNuevosRegistros();
            cargaDeCitasYHorarios();
            JOptionPane.showMessageDialog(null, "Horario añadido exitosamente");
            comprobarTabla();
        } else {
            // Método para personal
            insertarCitaPersonal();
            cargaDeCitasYHorarios();
            JOptionPane.showMessageDialog(null, "Cita añadida exitosamente");
            comprobarTabla();
        }
    }//GEN-LAST:event_btnPedirMousePressed

    private void btnBorrarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBorrarMousePressed
        if (tabla.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado un horario. Debe seleccionar una fila para borrar.");
        } else {
            borrarRegistro();
        }
    }//GEN-LAST:event_btnBorrarMousePressed

    private void btnSalirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSalirMousePressed
        // TODO add your handling code here:
        try {
            // Mostrar un cuadro de diálogo de confirmación para salir de la ventana
            int decision = JOptionPane.showConfirmDialog(null, "¿Seguro que desea salir?");
            // Verificar si se ha seleccionado "Sí" en el cuadro de diálogo de confirmación
            if (decision == JOptionPane.YES_OPTION) {
                // Cerrar la ventana actual
                dispose();
                // Crear una nueva instancia de VentanaLog y mostrarla
                VentanaPrincipal vl = new VentanaPrincipal(empleadoEscogido, con);
                vl.setVisible(true);
            }
        } catch (Exception ex) {
            JOptionPane.showConfirmDialog(null, "Hubo un error al intentar salir. Por favor cierre la aplicación y vuelva a abrirla.");
        }
    }//GEN-LAST:event_btnSalirMousePressed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPedir;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel espacios;
    private javax.swing.JLabel espacios1;
    private javax.swing.JLabel espacios2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JPanel panelTabla;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo que comprueba los campos a modificar en la cita
     *
     * @return true si se ha hecho correctamente, false en caso contrario.
     */
    private boolean comprobarYmodificarCita() {
        boolean exito = false;
        try {
            filaSeleccionada = tabla.getSelectedRow();
            if (filaSeleccionada != -1) {

                // Comprobar el tipo de usuario y mostrar diferentes opciones según el tipo
                if (empleadoEscogido.getApellidos().contains("Administrador")) {
                    // Mostrar el JOptionPane para seleccionar una opción
                    horarioSeleccionado = listaHorarioInicial.get(filaSeleccionada);
                    String[] opciones = {"Fecha", "Hora", "Servicio", "Precio", "Personal"};
                    String seleccionAdmin = (String) JOptionPane.showInputDialog(null, "Seleccione una opcion", "Opciones", JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
                    if (seleccionAdmin == null) {
                        exito = false;
                        throw new Exception("No se selecciono ninguna opcion");
                    } else {
                        // Realizar acciones según la opción seleccionada
                        switch (seleccionAdmin) {
                            case "Fecha":
                                modificarFecha(horarioSeleccionado);
                                cargaDeCitasYHorarios();
                                comprobarTabla();
                                break;
                            case "Hora":
                                /**
                                 * PENDIENTE DE CORREGIR FALLOS
                                 *
                                 * Corregido 31 Jul 2025
                                 */
                                modificarHora(horarioSeleccionado);
                                cargaDeCitasYHorarios();
                                comprobarTabla();
                                break;
                            case "Servicio":
                                /**
                                 * PENDIENTE DE CORREGIR FALLOS
                                 *
                                 * Corregido 31 Jul 2025
                                 */
                                modificarServicio(horarioSeleccionado);
                                cargaDeCitasYHorarios();
                                comprobarTabla();
                                break;
                            case "Precio":
                                /**
                                 * PENDIENTE DE CORREGIR FALLOS
                                 *
                                 * Corregido 31 Jul 2025
                                 */
                                modificarPrecio(horarioSeleccionado);
                                cargaDeCitasYHorarios();
                                comprobarTabla();
                                break;
                            case "Personal":

                                /**
                                 * PENDIENTE DE CORREGIR FALLOS
                                 *
                                 * Corregido 31 Jul 2025
                                 */
                                modificarPersonal(horarioSeleccionado);
                                cargaDeCitasYHorarios();
                                comprobarTabla();
                                break;
                            default:
                                JOptionPane.showMessageDialog(null, "Opción no válida");
                        }
                        exito = true;
                    }
                } else {
                    /**
                     * PENDIENTE DE CORREGIR
                     *
                     * Corregido 31 Jul 2025
                     */
                    horarioSeleccionado = listaHorarioInicial.get(filaSeleccionada);
                    // Mostrar el JOptionPane para seleccionar una opción
                    String[] opciones = {"Fecha", "Hora", "Servicio"};
                    String seleccion = (String) JOptionPane.showInputDialog(null, "Seleccione una opción", "Opciones", JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
                    if (seleccion == null) {
                        throw new Exception("No se ha seleccionado una opcion de modificacion.");
                    } else {
                        // Realizar acciones según la opción seleccionada
                        switch (seleccion) {
                            case "Fecha":
                                modificarFecha(horarioSeleccionado);
                                cargaDeCitasYHorarios();
                                llenarTablaHorario();
                                break;
                            case "Hora":
                                modificarHora(horarioSeleccionado);
                                cargaDeCitasYHorarios();
                                llenarTablaHorario();
                                break;
                            case "Servicio":
                                modificarServicio(horarioSeleccionado);
                                cargaDeCitasYHorarios();
                                llenarTablaHorario();
                                break;
                            default:
                                JOptionPane.showMessageDialog(null, "Seleccione una opcion");
                        }
                    }
                    exito = true;

                }

            } else {
                exito = false;
                throw new Exception("No se ha seleccionado un horario");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Hubo un error al modificar" + ex.getMessage());
        }
        return exito;
    }

    //<editor-fold defaultstate="collapsed" desc="Metodos de inicializacion de datos">
    /**
     * Método corregido para inicializar datos
     */
    private boolean inicializarDatos(Connection conexionBaseData, Personal personal) {
        boolean devo = false;
        try {
            con = conexionBaseData;
            empleadoEscogido = personal;

            // Inicializar listas
            listadoCitasInicial = new ArrayList<>();
            listaHorarioInicial = new ArrayList<>();

            if (personal.getId() > 1) {
                // Empleado normal - obtener solo sus horarios
                String fechaActual = LocalDate.now().toString(); // yyyy-MM-dd
                listaHorarioInicial = Horario.buscarHorariosDetallados(
                        true, fechaActual,
                        false, null,
                        true, personal.getId(),
                        false, 0,
                        conexionBaseData
                );

                if (listaHorarioInicial == null) {
                    throw new Exception("Dicho empleado no tiene ningun horario asignado");
                } else {
                    listadoCitasInicial = Cita.buscarTodas(con); // Obtenemos todas las citas que hay
                }

            } else {
                // Administrador - obtener todos los horarios
                listaHorarioInicial = Horario.obtenerTodosLosHorarios(conexionBaseData);
                if (listaHorarioInicial == null) {
                    listaHorarioInicial = new ArrayList<>();
                }

                // Obtener todas las citas
                listadoCitasInicial = Cita.buscarTodas(conexionBaseData);
                if (listadoCitasInicial == null) {
                    listadoCitasInicial = new ArrayList<>();
                }
            }
            // Recorremos todas las citas para filtrar los horarios que estan citados
            for (Cita cita : listadoCitasInicial) {
                if (listaHorarioInicial.contains(cita.getHorario())) { // Si en la lista contiene ese objeto Horario lo añadimos al listado de horarios citados
                    listadoHorariosCitados.add(cita.getHorario());
                }
            }

            devo = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al inicializar datos: " + e.getMessage());
            devo = false;
        }
        return devo;
    }

    private boolean inicializarDatosIniciales() {
        boolean devo = false;
        try {
            // Establecemos una nueva conexión
            con = ConexionBD.conectarSinLogin();
            // Buscamos por defecto la cuenta de administrador
            empleadoPorDefecto = Personal.obtenerPersonalPorId(1, con);
            empleadoEscogido = empleadoPorDefecto;
            cargaDeCitasYHorarios();
            devo = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error intentando inicializar los datos " + e.getMessage());
            devo = false;
        }

        return devo;
    }
    //</editor-fold>

    private boolean cargaDeCitasYHorarios() {
        boolean devo = false;
        try {
            if (listaHorarioInicial == null || listadoHorariosCitados == null || listadoCitasInicial == null || !listaHorarioInicial.isEmpty() || !listadoHorariosCitados.isEmpty() || !listadoCitasInicial.isEmpty()) {

                listadoCitasInicial = new ArrayList<>();
                listaHorarioInicial = new ArrayList<>();
                listadoHorariosCitados = new ArrayList<>();
                listadoCitasInicial.clear();
                listaHorarioInicial.clear();
                listadoHorariosCitados.clear();
            }
            listaHorarioInicial = Horario.obtenerTodosLosHorarios(con); // Obtenemos todos los horarios
            listadoCitasInicial = Cita.buscarTodas(con); // Obtenemos todas las citas que hay
            // Recorremos todas las citas para filtrar los horarios que estan citados
            for (Cita cita : listadoCitasInicial) {
                if (listaHorarioInicial.contains(cita.getHorario())) { // Si en la lista contiene ese objeto Horario lo añadimos al listado de horarios citados
                    listadoHorariosCitados.add(cita.getHorario());
                }
            }
            devo = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al realizar la carga de citas y horarios. " + e.getMessage());
            devo = false;
        }
        return devo;
    }

    //<editor-fold defaultstate="collapsed" desc="Metodos relacionados con la tabla">
    /**
     * Método para comprobar si la tabla está vacía y actualizarla en
     * consecuencia.
     */
    public boolean comprobarTabla() {
        boolean devo = false;
        try {
            if (tabla.getRowCount() > 0) { // Si la tabla tiene filas
                vaciarTabla();
            }
            llenarTabla(); // Llenar la tabla con datos
            tabla.revalidate();
            tabla.repaint();
            devo = true;
        } catch (Exception e) {
            devo = false;
        }
        return devo;
    }

    /**
     *
     */
    public boolean modificarDiseño() {
        /**
         * PENDIENTE CORREGIR Corregido 31 Jul 2025
         */
        // Botones
        boolean devo = false;
        try {
            if (empleadoEscogido == null) {
                empleadoEscogido = empleadoPorDefecto;
            } else {
                if (empleadoEscogido.getApellidos() != null) {
                    if (empleadoEscogido.getApellidos().contains("Administrador")) { // Si el tipo de usuario contiene "Administrador", se modifican los textos de los botones
                        btnPedir.setText("Añadir horario");
                        btnModificar.setText("Modificar horario");
                        btnBorrar.setText("Borrar horario");
                    } else { // Si el tipo de usuario no es "Administrador", se modifican los textos de los botones de otra forma
                        btnPedir.setText("Concertar Cita");
                        btnModificar.setText("Modificar Cita");
                        btnBorrar.setText("Anular Cita");
                    }
                }

            }
            // Propiedades de los botones
            btnSalir.putClientProperty(this, "roundrect");
            btnPedir.putClientProperty(this, "roundrect");
            btnModificar.putClientProperty(this, "roundrect");
            btnBorrar.putClientProperty(this, "roundrect");

            // Tabla
            tabla.setFillsViewportHeight(true);
            tabla.setCellSelectionEnabled(false);
            devo = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al modificar el diseño de la interfaz, " + e.getMessage());
            devo = false;
        }
        return devo;

    }

    /**
     * Método corregido para llenar la tabla con todos
     *
     * los horarios(vista administrador)
     *
     */
    private boolean llenarTablaTodosLosClientes() {
        boolean devo = false;
        try {
            // Crear el modelo de tabla
            DefaultTableModel modeloGeneral = new DefaultTableModel(columnasAdmin, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            if (listaHorarioInicial == null || listaHorarioInicial.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No hay horarios disponibles");
                tabla.setModel(modeloGeneral);
                return true;
            }

            // Recorrer cada horario UNA SOLA VEZ
            for (Horario horario : listaHorarioInicial) {
                String nombreCliente = "Disponible";
                boolean encontrado = false;

                // Buscar si este horario tiene una cita asignada
                for (Cita cita : listadoCitasInicial) {
                    if (!encontrado && cita != null && cita.getIdHorario() == horario.getId()) {
                        Cliente cliente = cita.getCliente();
                        nombreCliente = (cliente != null) ? cliente.getNombre() : "Cliente no encontrado";
                        encontrado = true;
                    }
                }

                // Agregar una sola fila por horario
                String[] fila = {
                    horario.getFecha(),
                    horario.getHora(),
                    horario.getDescripcion(),
                    String.valueOf(horario.getServicio().getPrecio()),
                    nombreCliente,
                    horario.getPersonal().getNombre()
                };
                modeloGeneral.addRow(fila);
            }

            // Configurar la tabla
            tabla.setModel(modeloGeneral);
            configurarSeleccionTabla();
            tabla.setVisible(true);
            devo = true;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al llenar tabla de administrador: " + e.getMessage());
            devo = false;
        }
        return devo;
    }

    /**
     * Método corregido para llenar la tabla de horarios (vista empleado)
     */
    private boolean llenarTablaHorario() {
        boolean devo = false;
        try {
            // Crear el modelo de tabla
            DefaultTableModel modelo = new DefaultTableModel(columnas, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            if (listaHorarioInicial == null || listaHorarioInicial.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No hay horarios asignados para este empleado");
                tabla.setModel(modelo);
                return true;
            }

            // Filtrar horarios del empleado actual (si no es administrador)
            ArrayList<Horario> horariosEmpleado = new ArrayList<>();
            if (empleadoEscogido != null && !empleadoEscogido.getApellidos().contains("Administrador")) {
                // Solo mostrar horarios del empleado actual
                for (Horario horario : listaHorarioInicial) {
                    if (horario.getPersonal().getId() == empleadoEscogido.getId()) {
                        horariosEmpleado.add(horario);
                    }
                }
            } else {
                // Si es administrador, mostrar todos
                horariosEmpleado = listaHorarioInicial;
            }

            // Recorrer cada horario del empleado UNA SOLA VEZ
            for (Horario horario : horariosEmpleado) {
                String nombreCliente = "Disponible";

                // Buscar si este horario tiene una cita asignada (Uso variable flag para salir del bucle si encuentra el nombre del cliente
                boolean encontrado = false;
                for (Cita cita : listadoCitasInicial) {
                    if (!encontrado && cita != null && cita.getIdHorario() == horario.getId()) {
                        Cliente cliente = cita.getCliente();
                        nombreCliente = (cliente != null) ? cliente.getNombre() : "Cliente no encontrado";
                        encontrado = true;
                    }
                }

                // Agregar una sola fila por horario
                String[] fila = {
                    horario.getFecha(),
                    horario.getHora(),
                    horario.getDescripcion(),
                    String.valueOf(horario.getServicio().getPrecio()),
                    nombreCliente,
                    horario.getPersonal().getNombre()
                };
                modelo.addRow(fila);
            }

            // Configurar la tabla
            tabla.setModel(modelo);
            configurarSeleccionTabla();
            devo = true;

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al llenar tabla horarios: " + ex.getMessage());
            ex.printStackTrace();
            devo = false;
        }
        return devo;
    }

    /**
     * Método auxiliar para configurar la selección de la tabla
     */
    private boolean configurarSeleccionTabla() {
        boolean exito = false;
        try {
            tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tabla.setColumnSelectionAllowed(false);
            tabla.setRowSelectionAllowed(true);
            tabla.setSelectionModel(new DefaultListSelectionModel() {
                @Override
                public void setSelectionInterval(int index0, int index1) {
                    if (index0 == index1 && isSelectedIndex(index0)) {
                        removeSelectionInterval(index0, index1);
                    } else {
                        super.setSelectionInterval(index0, index1);
                    }
                }
            });
            exito = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al configurar la seleccion de la tabla: " + e.getMessage());
            exito = false;
        }
        return exito;
    }

    /**
     *
     */
    public boolean llenarTabla() {
        boolean devo = false;
        try {
            if (empleadoEscogido.getApellidos() != null) {
                if (!empleadoEscogido.getApellidos().equals("Administrador")) {
                    // Si el tipo de usuario no es "Administrador", se llama al método llenarTablaHorario()
                    llenarTablaHorario();
                } else {
                    // Si el tipo de usuario es "Administrador", se llama al método llenarTablaTodosLosClientes()
                    llenarTablaTodosLosClientes();
                }
                devo = true;
            }
        } catch (Exception ex) {
            // Si se produce una SQLException, se muestra un mensaje de error indicando que no se pudo llenar la tabla
            JOptionPane.showMessageDialog(null, "No se pudo llenar la tabla" + ex.getMessage());
            devo = false;
        }
        return devo;
    }

    /**
     *
     */
    private boolean vaciarTabla() {
        boolean devo = false;
        try {
            // Se establece un nuevo modelo de tabla vacío, sin filas ni columnas
            tabla.setModel(new DefaultTableModel(0, 0));

            devo = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al vaciar la tabla " + e.getMessage());
        }
        return devo;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Metodos de Consultas">
    //<editor-fold defaultstate="collapsed" desc="Metodos de Insercion">
    /**
     * Método para insertar una cita para el personal.
     *
     * @throws HeadlessException Si se produce un error al mostrar el cuadro de
     * diálogo.
     */
    private boolean insertarCitaPersonal() {
        /**
         * PENDIENTE CORREGIR
         *
         * Corregido 31 Jul 2025
         */
        boolean devo = false;
        try {
            filaSeleccionada = tabla.getSelectedRow();
            if (filaSeleccionada != -1) {
                citaElegida = listadoCitasInicial.get(filaSeleccionada);
                if (citaElegida == null) {
                    throw new Exception("Este horario ya esta asignado");
                } else {

                    // Mostrar un cuadro de lista desplegable con los clientes disponibles para que el usuario seleccione uno
                    ArrayList<Cliente> listaClientes = Cliente.obtenerTodos(con);
                    DefaultComboBoxModel<String> clienteModel = new DefaultComboBoxModel<>(listaClientes.toArray(new String[0]));
                    comboBoxClientes = new JComboBox<>(clienteModel);
                    int resultadoCliente = JOptionPane.showConfirmDialog(null, comboBoxClientes, "Elige el cliente", JOptionPane.OK_CANCEL_OPTION);

                    if (resultadoCliente == JOptionPane.OK_OPTION) {
                        // Obtener el cliente seleccionado
                        Cliente clienteElegido = (Cliente) comboBoxClientes.getSelectedItem();

                        // Obtener el ID del cliente seleccionado
                        int idCliente = clienteElegido.getId();

                        // Insertar la cita con el cliente y el horario seleccionado
                        insertarCita(idCliente, citaElegida.getId());
                    }
                    devo = true;
                }
            } else {
                throw new Exception("Horario no seleccionado");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al realizar la cita " + ex.getMessage());
        }
        return devo;
    }

    /**
     * Método para insertar una nueva cita en la base de datos.
     *
     * @param idCliente El ID del cliente de la cita.
     * @param idHorario El ID del horario de la cita.
     */
    public boolean insertarCita(int idCliente, int idHorario) {
        /**
         * PENDIENTE CORREGIR
         *
         * Corregido 31 Jul 2025
         */

        boolean devo = false;
        try {
            Cita citaNueva = new Cita();
            citaNueva.setIdCliente(idCliente);
            citaNueva.setIdHorario(idHorario);
            if (!citaNueva.aniadirCita()) {
                throw new Exception("No se pudo realizar la cita");
            } else {
                JOptionPane.showMessageDialog(null, "Cita creada exitosamente");
            }
            llenarTablaHorario();
            devo = true;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al insertar la cita. " + ex.getMessage());
        }
        return devo;
    }

    /**
     * Método para obtener datos relacionados con la programación de un horario.
     * Muestra un diálogo con componentes para seleccionar la fecha, hora,
     * empleado y servicio. Luego, realiza la inserción de los datos en la tabla
     * de horario.
     */
    public boolean aniadirNuevosRegistros() {
        boolean devo = false;
        Horario horarioNuevo;
        try {

            // Crear los componentes de fecha y hora
            DatePicker datePicker = new DatePicker();
            TimePicker timePicker = new TimePicker();

            // Crear el combobox para empleados
            ArrayList<Personal> listaEmpleados = Personal.obtenerTodos(con);
            DefaultComboBoxModel<Personal> empleadoModel = new DefaultComboBoxModel<>(listaEmpleados.toArray(new Personal[0]));
            JComboBox<Personal> empleadoComboBox = new JComboBox<>(empleadoModel);

            // Crear el combobox para servicios
            ArrayList<Servicio> listaServicios = Servicio.obtenerTodos(con);
            DefaultComboBoxModel<Servicio> servicioModel = new DefaultComboBoxModel<>(listaServicios.toArray(new Servicio[0]));
            JComboBox<Servicio> servicioComboBox = new JComboBox<>(servicioModel);

            // Crear el panel de entrada de datos
            JPanel panel = new JPanel(new GridLayout(4, 2));
            panel.add(new JLabel("Fecha:"));
            panel.add(datePicker);
            panel.add(new JLabel("Hora:"));
            panel.add(timePicker);
            panel.add(new JLabel("Empleado:"));
            panel.add(empleadoComboBox);
            panel.add(new JLabel("Servicio:"));
            panel.add(servicioComboBox);
            // Mostrar el panel de entrada de datos en un diálogo
            int result = JOptionPane.showConfirmDialog(null, panel, "Ingrese los datos", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                // Obtener los valores seleccionados
                String fecha = datePicker.getDate().toString();
                String hora = timePicker.getTime().toString();
                Personal empleado = (Personal) empleadoComboBox.getSelectedItem();
                Servicio servicio = (Servicio) servicioComboBox.getSelectedItem();
                // Realizar la inserción en la tabla de horario
                horarioNuevo = new Horario(fecha, hora, empleado, servicio, con);
                ArrayList<Horario> horariosCoincidentes = Horario.buscarHorariosDetallados(true, fecha, true, hora, true, empleado.getId(), true, servicio.getId(), con);
                if (!horariosCoincidentes.isEmpty()) {
                    throw new Exception("El horario que intentas añadir ya existe");
                }
                devo = horarioNuevo.crearHorario();
            }
            devo = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al añadir un nuevo horario" + e.getMessage());
            devo = false;
        }
        return devo;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Metodos de Modificacion">
    /**
     *
     * @param horarioId
     */
    private boolean modificarHora(Horario horarioActual) {
        boolean devo = false;
        Horario horarioActualizado;
        try {
            // Se crea un nuevo objeto TimePicker para permitir al usuario seleccionar una nueva hora
            TimePicker nuevaFecha = new TimePicker();

            // Se muestra un cuadro de diálogo para que el usuario introduzca la nueva hora utilizando el objeto TimePicker
            int resultado = JOptionPane.showConfirmDialog(null, nuevaFecha, "Introduce nueva hora", JOptionPane.OK_CANCEL_OPTION);
//
            if (resultado != JOptionPane.CANCEL_OPTION) {
                // Se obtiene la hora actualizada seleccionada por el usuario en formato de cadena de texto
                String horaActualizada = nuevaFecha.getTime().toString();
//
// Se crea un objeto horario para actualizar la fecha del horario seleccionado
                horarioActualizado = new Horario(horarioActual.getId(), con);
                horarioActualizado.setHora(horaActualizada);
                horarioActualizado.actualizarHorario();
            }
            devo = true;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al modificar la hora" + ex.getMessage());
        }
        return devo;
    }

    /**
     * Método para modificar la fecha del servicio.
     *
     */
    public boolean modificarFecha(Horario horarioActual) {
        boolean devo = false;
        Horario horarioActualizado;
        try {
            // Crear un cuadro de diálogo con un DatePicker para que el usuario seleccione una nueva fecha
            DatePicker nuevaFecha = new DatePicker();
            int resultado = JOptionPane.showConfirmDialog(null, nuevaFecha, "Introduce nueva fecha", JOptionPane.OK_CANCEL_OPTION);
            if (resultado != JOptionPane.CANCEL_OPTION) {
                // Obtener la fecha actualizada
                String fechaActualizada = nuevaFecha.getDate().toString();
                // Llamar a un método de consulta para modificar el servicio con la nueva fecha
                horarioActualizado = new Horario(horarioActual.getId(), con);
                horarioActualizado.setFecha(fechaActualizada);
                horarioActualizado.actualizarHorario();
            } else {
            }
            devo = true;
        } catch (Exception e) {
            devo = false;
        }
        return devo;
    }

    /**
     * Método para modificar el precio del servicio.
     *
     */
    public boolean modificarPrecio(Horario horarioActual) {
        boolean devo = false;
        Servicio servicioActualizado;
        try {
            // Mostrar un cuadro de diálogo para que el usuario ingrese el nuevo precio
            String nuevoPrecioStr = JOptionPane.showInputDialog(null, "Introduce el nuevo precio:", "Actualizar precio", JOptionPane.OK_CANCEL_OPTION);

            if (nuevoPrecioStr != null) {
                double nuevoPrecio = Double.parseDouble(nuevoPrecioStr);
                servicioActualizado = Servicio.obtenerServicioPorId(horarioActual.getIdServicio(), con);
                servicioActualizado.setPrecio(nuevoPrecio);
                servicioActualizado.actualizarServicio();
                JOptionPane.showMessageDialog(null, "Se modificó el precio del servicio.");
                devo = true;
            } else {
                throw new Exception("El precio no es válido o está vacío");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error modificando el precio");
            devo = false;
        }
        return devo;
    }

    /**
     * Método para modificar el personal del servicio.
     *
     * @param personalActual El objeto Horario con el personal actual del
     * servicio.
     */
    public boolean modificarPersonal(Horario personalActual) {
        boolean devo = false;
        try {
            // Obtener la lista de personal disponible
            ArrayList<Personal> personalPelu = Personal.obtenerTodos(con);
            Horario horarioActualizado;
            // Mostrar un cuadro de lista desplegable con el personal disponible para que el usuario seleccione uno nuevo
            JComboBox comboboxPers = new JComboBox(personalPelu.toArray());
            int resultado = JOptionPane.showConfirmDialog(null, comboboxPers, "Seleccione Nuevo Personal", JOptionPane.OK_OPTION);

            if (resultado == JOptionPane.CANCEL_OPTION) {
                JOptionPane.showMessageDialog(null, "Cancelando...");
                devo = true;
            } else {
                // Obtener el personal seleccionado
                Personal empleadoEscogido = (Personal) comboboxPers.getSelectedItem();
                horarioActualizado = personalActual;
                horarioActualizado.setIdPersonal(empleadoEscogido.getId());
                // Llamar a un método de consulta para modificar el servicio con el nuevo personal
                if (!horarioActualizado.actualizarHorario()) {
                    throw new Exception("Error al actualizar el horario por el personal");
                }
                devo = true;
            }
        } catch (Exception ex) {
            devo = false;
            JOptionPane.showMessageDialog(null, "Error en la modificacion. " + ex.getMessage());
        }
        return devo;
    }

    /**
     * Método para modificar el servicio de un horario.
     *
     * @param horarioSeleccionado El objeto Horario del horario seleccionado.
     * @throws HeadlessException Si se produce un error al mostrar el cuadro de
     * diálogo.
     */
    private boolean modificarServicio(Horario horarioSeleccionado) {
        boolean devo = false;
        ArrayList<Servicio> listaServ;
        Servicio nuevoServicio;
        Horario horarioActualizado;
        JComboBox comboboxServ;
        try {
            // Obtener la lista de servicios disponibles
            listaServ = Servicio.obtenerTodos(con);
            // Mostrar un cuadro de lista desplegable con los servicios disponibles para que el usuario seleccione uno nuevo
            comboboxServ = new JComboBox(listaServ.toArray());
            int resultado = JOptionPane.showConfirmDialog(null, comboboxServ, "Seleccione nuevo servicio", JOptionPane.OK_OPTION);
            if (resultado != JOptionPane.CANCEL_OPTION) {
                // Obtener el servicio seleccionado y su ID
                nuevoServicio = (Servicio) comboboxServ.getSelectedItem();
                horarioActualizado = new Horario(horarioSeleccionado.getId(), con);
                horarioActualizado.setIdServicio(nuevoServicio.getId());
                horarioActualizado.actualizarHorario();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al inentar modificar el servicio. " + ex.getMessage());
        }
        return devo;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Metodos de Borrado">
    /**
     * Método privado para realizar el borrado de un horario por parte de un
     * administrador.
     *
     * @throws HeadlessException Si ocurre algún error relacionado con la
     * interfaz gráfica.
     */
    private boolean borradoAdmin() {
        boolean devo = false;
        Horario horarioElegido;
        try {
            // Mostrar un cuadro de diálogo de confirmación para asegurarse de que se desea borrar el horario seleccionado
            int decision = JOptionPane.showConfirmDialog(null, "Seguro que desea borrar el horario seleccionado (ten en cuenta que puede contener un cliente)", "Confirmacion", JOptionPane.YES_NO_OPTION);
            if (decision == JOptionPane.YES_OPTION) {
                horarioElegido = listaHorarioInicial.get(filaSeleccionada);
                if (!horarioElegido.eliminarHorario()) {
                    throw new Exception("No se pudo borrar la cita. Depura el método.");
                }
            } else {
                throw new Exception("Borrado cancelado.");
            }
            devo = true;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al intentar borrar el horario, " + ex.getMessage());
            devo = false;
        }
        return devo;
    }

    //</editor-fold>
    //</editor-fold>
    private boolean borrarRegistro() throws HeadlessException {
        // TODO add your handling code here:
        boolean devo = false;
        try {
            filaSeleccionada = tabla.getSelectedRow();
            if (empleadoEscogido.getApellidos().contains("Administrador")) {
                if (!borradoAdmin()) {
                    throw new Exception("Error al intentar borrar el horario por parte del Admin.");
                }
                if (!cargaDeCitasYHorarios()) {
                    throw new Exception("Error al intentar cargar los horarios.");
                }
                if (!comprobarTabla()) {
                    throw new Exception("Error al intentar mostrar los horarios.");
                }
            } else {
                Cita citaSeleccionada = listadoCitas.get(filaSeleccionada);
                if (citaSeleccionada == null) {
                    throw new Exception("No hay ninguna cita que borrar. No existen citas ");
                } else {
                    // Realizar la acción correspondiente según la selección del usuario
                    int confirmacion = JOptionPane.showConfirmDialog(null, "¿Está seguro de que desea borrar la cita seleccionada? ", "Borrar cita", JOptionPane.OK_CANCEL_OPTION);
                    if (confirmacion == JOptionPane.OK_OPTION) {
                        if (!citaSeleccionada.eliminarCita()) {
                            throw new Exception("No se pudo borrar la cita.");
                        } else {
                            JOptionPane.showMessageDialog(null, "Borrado exitoso");
                        }
                        cargaDeCitasYHorarios();
                        comprobarTabla();
                        JOptionPane.showMessageDialog(null, "Borrado exitoso");
                        llenarTabla();
                    } else {

                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo actualizar la tabla" + e.getMessage());
        }
        return devo;
    }

}
